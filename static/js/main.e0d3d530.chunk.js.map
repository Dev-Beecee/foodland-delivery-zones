{"version":3,"sources":["components/FormData.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dotenv","config","useStyles","makeStyles","dropZone","width","height","opacity","position","zIndex","dzOverlay","border","borderRadius","fontFamily","color","top","right","textAlign","padding","FormData","useState","coordinates","setCoordinates","statut","setStatut","classes","undefined","selectedFile","setSelectedFile","useForm","register","handleSubmit","watch","onSubmit","data","a","console","log","file","text","then","nfCoords","split","coords","slice","length","reverse","map","item","lat","Number","lng","axios","method","headers","process","APIKEY","url","idBusiness","responseType","enabled","name","zoneName","address","type","price","minimum","min","JSON","stringify","schedule","lapses","open","hour","minute","close","Form","className","Label","ref","id","onChange","e","target","checked","files","Button","variant","Container","fluid","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0d3d530.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/styles\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { Container, Button, Form } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport dotenv from 'dotenv';\n\ndotenv.config()\n\nconst useStyles = makeStyles({\n  dropZone: {\n    width: \"300px\",\n    height: \"100px\",\n    opacity: \"0\",\n    position: \"relative\",\n    zIndex: 1,\n  },\n  dzOverlay: {\n    width: \"300px\",\n    height: \"100px\",\n    border: \"solid 3px white\",\n    borderRadius: \"25px\",\n    fontFamily: \"cursive\",\n    color: \"#black\",\n    position: \"absolute\",\n    top: \"494px\",\n    right: \"810px\",\n    textAlign: \"center\",\n    padding: \"5px\",\n  },\n});\n\nconst FormData = (): JSX.Element => {\n  const [coordinates, setCoordinates] = useState({});\n  const [statut, setStatut] = useState(false);\n  const classes = useStyles();\n  const [selectedFile, setSelectedFile]: any = useState(undefined);\n  \n  const handleClick = (e: { target: any }): any => {\n    const file = e.target.files[0];\n    file.text().then((text: string) => console.log(text));\n    setSelectedFile(file);\n  };\n\n  function dropZone() {\n    if (selectedFile && selectedFile.name) {\n      return <div>{selectedFile.name}</div>;\n    } else {\n      return (\n        <div className={classes.dzOverlay}>\n          Glissez votre fichier kml ici <br />\n          ou\n          <br />\n          Cliquez pour ajouter\n        </div>\n      );\n    }\n  }\n  const { register, handleSubmit, watch } = useForm();\n  const onSubmit = async (data: any) => {\n    console.log(data);\n    const file = data.file[0];\n    if(file){\n      await file.text().then((text: string) => {\n        let nfCoords = text.split(\"<coordinates>\")[1].split(\"</coordinates>\")[0];\n        let coords = nfCoords\n          .split(\"\\n\")\n          .slice(1, nfCoords.split(\"\\n\").length - 1)\n          .reverse()\n          .map((item) => {\n            return { lat: Number(item[1]), lng: Number(item[0]) };\n          });\n        setCoordinates(coords);\n      });\n      axios({\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': process.env.APIKEY,\n        },\n        url: `https://apiv4.ordering.co/v400/en/foodland/business/${data.idBusiness}/deliveryzones`,\n        responseType:'json',\n        data: {\n          enabled: data.enabled,\n          name: data.zoneName,\n          address: data.address,\n          type: 2,\n          price: data.price,\n          minimum: data.min,\n          data: JSON.stringify(coordinates),\n          schedule: JSON.stringify({enabled : true, lapses : {open : {hour:0 , minute:0}, close : {hour:23 , minute:59}}})\n        }\n      })\n    };\n    console.log(watch(\"example\"));\n  }\n  return (\n    <>\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"col\">\n        <Form.Label>id du Restaurant</Form.Label>\n        <input\n          ref={register}\n          name=\"idBusiness\"\n          type=\"text\"\n          className=\"form-control m-0\"\n        />\n\n        <Form.Label>Nom de la zone</Form.Label>\n        <input\n          ref={register}\n          name=\"zoneName\"\n          type=\"text\"\n          className=\"form-control\"\n        />\n\n        <Form.Label>Adresse</Form.Label>\n        <input\n          ref={register}\n          name=\"address\"\n          type=\"text\"\n          className=\"form-control\"\n        />\n\n        <Form.Label>Prix minimum</Form.Label>\n        <input ref={register} name=\"min\" type=\"text\" className=\"form-control\" />\n\n        <Form.Label>Prix</Form.Label>\n        <input\n          ref={register}\n          name=\"price\"\n          type=\"text\"\n          className=\"form-control\"\n        />\n        <label> statut de la zone </label>\n        <div className=\"form-check form-switch\">\n          <input ref={register} name=\"enabled\" className=\"form-check-input mx-2\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onChange={(e) => {setStatut(e.target.checked);}}/>\n          <label>{statut?  'active' : 'désactivé'}</label>\n        </div>\n        <div className=\"d-flex flex-column justify-content-center align-items-center my-5\">\n          <label></label>\n          <input\n            ref={register}\n            type=\"file\"\n            name=\"file\"\n            className={classes.dropZone}\n            onChange={handleClick}\n          />\n          {dropZone()}\n        </div>\n        <Button variant=\"success\" type=\"submit\" className=\"my-2\">\n          {\" \"}\n          Envoyer{\" \"}\n        </Button>\n      </Form>\n      <Container fluid></Container>\n    </>\n  );\n};\nexport default FormData;\n","import React from 'react';\nimport './App.css';\nimport FormData from './components/FormData';\nimport { Container } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <div className=\"col-sm-6 d-flex flex-column justify-content-center align-items-center w-100 my-5 bg-dark text-white rounded shadow-lg\">\n          <FormData/>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}